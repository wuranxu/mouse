// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MouseServiceClient is the client API for MouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MouseServiceClient interface {
	Do(ctx context.Context, opts ...grpc.CallOption) (MouseService_DoClient, error)
}

type mouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMouseServiceClient(cc grpc.ClientConnInterface) MouseServiceClient {
	return &mouseServiceClient{cc}
}

func (c *mouseServiceClient) Do(ctx context.Context, opts ...grpc.CallOption) (MouseService_DoClient, error) {
	stream, err := c.cc.NewStream(ctx, &MouseService_ServiceDesc.Streams[0], "/MouseService/Do", opts...)
	if err != nil {
		return nil, err
	}
	x := &mouseServiceDoClient{stream}
	return x, nil
}

type MouseService_DoClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type mouseServiceDoClient struct {
	grpc.ClientStream
}

func (x *mouseServiceDoClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mouseServiceDoClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MouseServiceServer is the server API for MouseService service.
// All implementations must embed UnimplementedMouseServiceServer
// for forward compatibility
type MouseServiceServer interface {
	Do(MouseService_DoServer) error
	mustEmbedUnimplementedMouseServiceServer()
}

// UnimplementedMouseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMouseServiceServer struct {
}

func (UnimplementedMouseServiceServer) Do(MouseService_DoServer) error {
	return status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedMouseServiceServer) mustEmbedUnimplementedMouseServiceServer() {}

// UnsafeMouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MouseServiceServer will
// result in compilation errors.
type UnsafeMouseServiceServer interface {
	mustEmbedUnimplementedMouseServiceServer()
}

func RegisterMouseServiceServer(s grpc.ServiceRegistrar, srv MouseServiceServer) {
	s.RegisterService(&MouseService_ServiceDesc, srv)
}

func _MouseService_Do_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MouseServiceServer).Do(&mouseServiceDoServer{stream})
}

type MouseService_DoServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type mouseServiceDoServer struct {
	grpc.ServerStream
}

func (x *mouseServiceDoServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mouseServiceDoServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MouseService_ServiceDesc is the grpc.ServiceDesc for MouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MouseService",
	HandlerType: (*MouseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Do",
			Handler:       _MouseService_Do_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
